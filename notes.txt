//function builds interactive notes display
//output 2d array of musical notes into row/column format
const createNotesTable = () => {

    /*
        need to modify to be dynamic later - number of strings and tunings

        notes = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"]
        assuming standard tuning, next internal array would start at previous array note[i + 5]

        newArray [[]];

        for (let note of notes) {
            if (note == userEnteredValue) {
                for (index = 0; index <= 12) {
                    newArray.push() something something maybe another loop or two

                    would need to loop and push notes until before it hits itself, then breaks
                        if (var == var) {break} or if (colIndex <= something) {break} ???
                    would then need to push a new internal array into newArray[[]] until == userEntered stringNum
                }
            }
        }
    */
    const musicalNotes = [
        ["B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#"],  //B
        ["E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#", "D", "D#"],  //E
        ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"],  //A
        ["D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#"],  //D
        ["G", "G#", "A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#"]   //G
    ];
}


  1    2     3    4    5     6    7     8    9    10    11    12
["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"],  //A


MAJOR   

note    Static index    interval difference (x - root)
"B      3               ()
"C#     5               2
"D#     7               4
"E      8               5
"F#     10              7
"G#     12              9
"A#     2               -1

MINOR

"B
"C#
"D
"E
"F#
"G
"A






/*
    notes for understanding this
    1. targeting parent element
    2. adding event listener on "change"
    3. IIFE where we pass in the event itself
    4. IF statement uses the event like an object
        the event is tied to the target which is matched to radio and its value
        if value === xyz, do something

*/

const toggleHighlight = (singleHighlight) => {

    //
    const highlightContainer = document.getElementById("highlightControls");

    highlightContainer.addEventListener("change", function(event) {

        // let singleHighlight;


        if (event.target && event.target.matches("input[type='radio']")) {

            if (event.target.value === "noteHighlight") {

                singleHighlight = true;

                // extractor(singleHighlight);

            } else if (event.target.value === "scaleHighlight") {

                singleHighlight = false;

                // extractor(singleHighlight);


            } else {
                console.log("else");
                return;
                
            }
        }

        extractor(singleHighlight);
    });
}

const extractor = singleHighlight => {return singleHighlight;}